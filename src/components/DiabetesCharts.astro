---
import { supabase } from '../lib/supabase';

// Obtener los últimos 1000 registros ordenados por ts_utc
const { data, error } = await supabase
  .from('diabetes')
  .select('ts_utc, glucose_mg_dl, heart_rate_bpm, alarm')
  .order('ts_utc', { ascending: false })
  .limit(1000);

console.log('Supabase response:', { data, error });

// Invertir los datos para que estén en orden cronológico
const chartData = data ? data.reverse() : [];

// Preparar los datos para las gráficas
const labels = chartData.map(record => {
  const date = new Date(record.ts_utc);
  // Formato más corto: HH:mm
  return date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
});

const glucoseData = chartData.map(record => record.glucose_mg_dl);
const heartRateData = chartData.map(record => record.heart_rate_bpm);
const alarmPoints = chartData.map(record => ({
  x: record.ts_utc,
  y: record.glucose_mg_dl,
  alarm: record.alarm === 1
}));
---

<div class="charts-container">
  {error && <p class="error">Error al cargar datos: {error.message}</p>}
  {!data && <p>Cargando datos...</p>}
  {data && data.length === 0 && <p>No hay datos disponibles</p>}
  
  {data && data.length > 0 && (
    <>
      <div class="chart-wrapper">
        <h3>Nivel de Glucosa</h3>
        <canvas id="glucoseChart"></canvas>
      </div>
      <div class="chart-wrapper">
        <h3>Frecuencia Cardíaca</h3>
        <canvas id="heartRateChart"></canvas>
      </div>
    </>
  )}
</div>

<script define:vars={{ labels, glucoseData, heartRateData, alarmPoints }}>
  window.addEventListener('load', () => {
    const glucoseCtx = document.getElementById('glucoseChart');
    const heartRateCtx = document.getElementById('heartRateChart');
    
    if (!glucoseCtx || !heartRateCtx) {
      console.error('No se encontraron los elementos canvas');
      return;
    }

    // Configuración común para ambas gráficas
    const commonOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          mode: 'index',
          intersect: false,
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          titleColor: '#1e293b',
          bodyColor: '#1e293b',
          borderColor: '#e2e8f0',
          borderWidth: 1,
          padding: 10,
          displayColors: false
        }
      },
      layout: {
        padding: {
          bottom: 20
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          },
          ticks: {
            maxRotation: 0,
            autoSkip: true,
            maxTicksLimit: 10,
            font: {
              size: 11
            },
            padding: 10
          }
        },
        y: {
          grid: {
            color: 'rgba(226, 232, 240, 0.5)'
          }
        }
      },
      interaction: {
        mode: 'nearest',
        axis: 'x',
        intersect: false
      }
    };

    // Crear gráfica de glucosa
    new Chart(glucoseCtx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          data: glucoseData,
          borderColor: '#3b82f6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointRadius: (context) => {
            const index = context.dataIndex;
            return alarmPoints[index].alarm ? 2.5 : 0;
          },
          pointBackgroundColor: (context) => {
            const index = context.dataIndex;
            return alarmPoints[index].alarm ? '#ef4444' : '#3b82f6';
          },
          pointBorderColor: '#fff',
          pointBorderWidth: 1,
          pointHoverRadius: 6,
          pointHoverBackgroundColor: (context) => {
            const index = context.dataIndex;
            return alarmPoints[index].alarm ? '#ef4444' : '#3b82f6';
          },
          pointHoverBorderColor: '#fff',
          pointHoverBorderWidth: 2
        }]
      },
      options: {
        ...commonOptions,
        scales: {
          ...commonOptions.scales,
          y: {
            ...commonOptions.scales.y,
            min: 30,
            max: 140,
            title: {
              display: true,
              text: 'mg/dL',
              font: {
                weight: 'bold'
              }
            }
          }
        }
      }
    });

    // Crear gráfica de frecuencia cardíaca
    new Chart(heartRateCtx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          data: heartRateData,
          borderColor: '#1d4ed8',
          backgroundColor: 'rgba(29, 78, 216, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointRadius: 0,
          pointHoverRadius: 6,
          pointHoverBackgroundColor: '#1d4ed8',
          pointHoverBorderColor: '#fff',
          pointHoverBorderWidth: 2
        }]
      },
      options: {
        ...commonOptions,
        scales: {
          ...commonOptions.scales,
          y: {
            ...commonOptions.scales.y,
            min: 50,
            max: 100,
            title: {
              display: true,
              text: 'BPM',
              font: {
                weight: 'bold'
              }
            }
          }
        }
      }
    });
  });
</script>

<style>
  .charts-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin-top: 2rem;
  }

  .chart-wrapper {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem 1.5rem 2rem 1.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    height: 400px;
  }

  h3 {
    margin-bottom: 1rem;
    color: #1e293b;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .error {
    color: #ef4444;
    padding: 1rem;
    background: #fee2e2;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
  }

  @media (min-width: 1024px) {
    .charts-container {
      flex-direction: row;
    }

    .chart-wrapper {
      width: 50%;
    }
  }
</style> 